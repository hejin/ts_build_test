# cspell:ignore clientupdate riscv64 zizmor
name: Build Go Binaries (Modified Source)
on:
  #schedule:
  #  - cron: '0 0/3 * * *'
  workflow_dispatch:
env:
  SOFTWARE_NAME: "Tailscale"
  FILE_NAME: "tailscaled"
  REPO: "tailscale/tailscale"
  # TODO: If you have forked or copied this code you need to change to your repository here.
  REPO_SMALL: "hejin/ts_build_test"
  GIT_AUTHOR_NAME: "hejin"
  GIT_AUTHOR_EMAIL: "lwbt_pipeline@github.com"
jobs:
  check-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      TAG: ${{ steps.tag.outputs.TAG }}
      TAG_SMALL: ${{ steps.tag_small.outputs.TAG_SMALL }}
    steps:
      - name: Get latest ${{ env.SOFTWARE_NAME }} tag
        id: tag
        run: |
          latest_tag=$(
            curl -s "https://api.github.com/repos/${REPO}/releases/latest" \
              | jq -r '.tag_name'
          )
          echo "TAG=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "Latest ${SOFTWARE_NAME} Tag: $latest_tag"
        env:
          SOFTWARE_NAME: ${{ env.SOFTWARE_NAME }}
          REPO: ${{ env.REPO }}
      - name: Get latest ${{ env.SOFTWARE_NAME }} Small tag
        id: tag_small
        run: |
          latest_tag=$(
            curl -s "https://api.github.com/repos/${REPO_SMALL}/releases/latest" \
              | jq -r '.tag_name' || echo ""
          )
          echo "TAG_SMALL=$latest_tag" >> "$GITHUB_OUTPUT"
          echo "Latest ${SOFTWARE_NAME} Small Tag: $latest_tag"
        env:
          SOFTWARE_NAME: ${{ env.SOFTWARE_NAME }}
          REPO_SMALL: ${{ env.REPO_SMALL }}
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs: check-versions
    #if: needs.check-versions.outputs.TAG_SMALL != needs.check-versions.outputs.TAG
    env:
      TAG: ${{ needs.check-versions.outputs.TAG }}
    strategy:
      matrix:
        go-version: [stable]
        os: [linux]
        platform:
          - arm64
          - mips
    steps:
      - name: Checkout ${{ env.SOFTWARE_NAME }} repository
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.TAG }}
          persist-credentials: false
      - name: Modify source code
        run: |
          sed -i \
            's|https://pkgs.tailscale.com|https://github.com/lwbt/ts_build_test/releases/download|' \
            "clientupdate/clientupdate.go"
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Download Go modules
        run: go mod download
      - name: Cross-compile
        run: |
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.platform }} ./build_dist.sh \
            --extra-small --box \
            -o "${FILE_NAME}-${{ matrix.os }}-${{ matrix.platform }}" ./cmd/"${FILE_NAME}"
        env:
          FILE_NAME: ${{ env.FILE_NAME }}
      - name: Upload built binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILE_NAME }}-${{ matrix.os }}-${{ matrix.platform }}
          path: ./${{ env.FILE_NAME }}-${{ matrix.os }}-${{ matrix.platform }}
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    needs:
      - build
      - check-versions
    #if: needs.check-versions.outputs.TAG_SMALL != needs.check-versions.outputs.TAG
    env:
      TAG: ${{ needs.check-versions.outputs.TAG }}
    steps:
      # NOTE: While UPX seems to be at least available on the Ubuntu Runner
      # images, we opt to use the most recent version here with the latest
      # fixes.
      - name: Get UPX latest version
        id: get-upx-version
        run: |
          echo "UPX_VERSION=$(
            curl -s https://api.github.com/repos/upx/upx/releases/latest \
              | jq -r '.tag_name[1:]'
          )" >> "$GITHUB_ENV"
      # NOTE: Ideally we want to use either the preinstalled version or the
      # latest version. If the version number wasn't included in the download
      # we could skip the step of determining what the latest version is. I
      # will leave the URL with the version number here for now.
      #   wget -q "https://github.com/upx/upx/releases/download/v${{ env.UPX_VERSION }}/upx-${{ env.UPX_VERSION }}-amd64_linux.tar.xz"
      - name: Download UPX
        run: |
          wget -q "https://github.com/upx/upx/releases/latest/download/upx-${UPX_VERSION}-amd64_linux.tar.xz"
          tar --to-stdout -xf "upx-${UPX_VERSION}-amd64_linux.tar.xz" \
            "upx-${UPX_VERSION}-amd64_linux/upx" > "${PWD}/upx"
          chmod -v +x "${PWD}/upx"
        env:
          UPX_VERSION: ${{ env.UPX_VERSION }}
      - name: Download built binaries
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ env.FILE_NAME }}-*
      - name: Moving files
        run: |
          for dir in "${FILE_NAME}-"*; do
            mv -v "${dir}" "${dir}.d"
            mv -v "${dir}.d/${FILE_NAME}-"* .
            rmdir -v "${dir}.d"
          done
          # NOTE: upx: tailscaled-linux-riscv64: UnknownExecutableFormatException
          mv -v "${FILE_NAME}-linux-riscv64" "${FILE_NAME}-linux-riscv64-uncompressed"
          gzip "${FILE_NAME}-linux-riscv64-uncompressed"
          chmod -v +x "${FILE_NAME}-"*
        env:
          FILE_NAME: ${{ env.FILE_NAME }}
      - name: Compress Binary with UPX
        run: |
          "${PWD}/upx" --lzma --best --no-progress \
            "${FILE_NAME}-"*"-arm64" \
            "${FILE_NAME}-"*"-mips"
        env:
          FILE_NAME: ${{ env.FILE_NAME }}
      - name: Create checksums
        run: |
          sha256sum "${FILE_NAME}-"* > "checksums.txt"
        env:
          FILE_NAME: ${{ env.FILE_NAME }}
      - name: Checkout ${{ env.SOFTWARE_NAME }} Small repository
        uses: actions/checkout@v4
        with:
          path: tools
          # TODO: Need to investigate what to do to pacify zizmor checks and
          # also be able to set the tag. There may even be a better way than
          # the script used below.
          #persist-credentials: false
      - name: Create tag in ${{ env.SOFTWARE_NAME }} Small repository
        run: |
          cd tools
          if git rev-parse --quiet --verify "refs/tags/${TAG}-test"; then
            echo "Tag already exists"
            exit 0
          else
            echo "Tag does not exist, creating"
            git tag "${TAG}-test"
            git push --tags
          fi
        env:
          TAG: ${{ env.TAG }}
      - name: Create Release
        uses: ncipollo/release-action@2c591bcc8ecdcd2db72b97d6147f871fcd833ba5 # v1.14.0
        with:
          name: Small ${{ env.SOFTWARE_NAME }} ${{ env.TAG }}-test
          tag: ${{ env.TAG }}-test
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          prerelease: true
          #allowupdates: true
          artifacts: |
            ${{ env.FILE_NAME }}-*
            checksums.txt
          body: |
            Small ${{ env.SOFTWARE_NAME }} build ${{ env.TAG }}-test

            For a complete changelog go to https://github.com/${{ env.REPO }}/releases/tag/${{ env.TAG }}

            This release was created by:

            * Building a combined binary of `tailscale` and `tailscaled`
            * Using the build option `--extra-small`
            * Compressing the binary with UPX
            * Modifying the source code!

            To use both programs, rename `tailscaled-OS-ARCH` to `tailscaled` and create a symbolic (`ln -sv tailscaled tailscale`)
